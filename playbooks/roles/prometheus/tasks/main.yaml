---
- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - /etc/prometheus
    - /etc/prometheus/rules
    - /etc/prometheus/targets
    - /etc/grafana
    - /etc/grafana/provisioning
    - /etc/grafana/provisioning/alerting
    - /etc/grafana/provisioning/dashboards
    - /etc/grafana/provisioning/datasources
    - /etc/grafana/provisioning/plugins
    - /etc/grafana/provisioning/notifiers
    - /etc/grafana/dashboards
- name: Create prometheus configuration
  ansible.builtin.template:
    dest: /etc/prometheus/prometheus.yaml
    src: prometheus-yaml.jinja
    mode: "0644"
  register: prometheus_configuration
- name: Create alertmanager rules
  ansible.builtin.template:
    dest: /etc/prometheus/rules/default-alert.rules.yaml
    src: default-alert-rules-yaml.jinja
    mode: "0644"
  register: prometheus_alert_rules
- name: Create alertmanager configuration
  ansible.builtin.template:
    dest: /etc/prometheus/alertmanager.yaml
    src: alertmanager-yaml.jinja
    mode: "0644"
  register: prometheus_alertmanager_config
- name: Create grafana configuration
  ansible.builtin.template:
    dest: /etc/grafana/grafana.ini
    src: grafana-ini.jinja
    mode: "0644"
  register: prometheus_grafana_configuration
- name: Create grafana datasources configuration
  ansible.builtin.template:
    dest: /etc/grafana/provisioning/datasources/prometheus.yaml
    src: grafana-datasources-prometheus-yaml.jinja
    mode: "0644"
  register: prometheus_grafana_datasource_configuration
- name: Copy grafana dashboard configuration
  ansible.builtin.copy:
    dest: /etc/grafana/provisioning/dashboards/ansible-managed.yaml
    src: dashboards.yaml
    mode: "0644"
  register: prometheus_grafana_dashboards
- name: Copy grafana dashboards
  ansible.posix.synchronize:
    dest: /etc/grafana
    src: files/dashboards
    owner: false
    group: false

# Docker containers
- name: Create alertmanager
  community.docker.docker_container:
    image: prom/alertmanager:v0.27.0
    image_name_mismatch: recreate
    name: alertmanager
    command: >-
      --config.file=/etc/prometheus/alertmanager.yaml
      --storage.path=/alertmanager
    networks:
      - name: "{{ prometheus_alertmanager_network }}"
        ipv4_address: "{{ prometheus_alertmanager_ip }}"
    dns_servers:
      - "{{ ip_dns_0 }}"
      - "{{ ip_dns_1 }}"
    published_ports:
      - 9093/tcp
    recreate: >-
      {{ prometheus_alertmanager_config.changed }}
    restart_policy: unless-stopped
    state: started
    volumes:
      - /etc/prometheus/alertmanager.yaml:/etc/prometheus/alertmanager.yaml:ro
      - alertmanager-data:/alertmanager
- name: Create prometheus docker
  community.docker.docker_container:
    image: prom/prometheus:v{{ prometheus_version }}
    image_name_mismatch: recreate
    name: prometheus
    command: >-
      --config.file=/etc/prometheus/prometheus.yaml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
    networks:
      - name: "{{ prometheus_network }}"
        ipv4_address: "{{ prometheus_ip }}"
    dns_servers:
      - "{{ ip_dns_0 }}"
      - "{{ ip_dns_1 }}"
    published_ports:
      - 9090/tcp
    recreate: >-
      {{ prometheus_configuration.changed or
         prometheus_alert_rules.changed }}
    restart_policy: unless-stopped
    state: started
    volumes:
      - /etc/prometheus/rules:/etc/prometheus/rules:ro
      - /etc/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - /etc/prometheus/targets:/etc/prometheus/targets:ro
      - prometheus-data:/prometheus
  register: prometheus_container
- name: Create grafana docker
  community.docker.docker_container:
    image: grafana/grafana-oss:9.5.0
    image_name_mismatch: recreate
    name: grafana
    command: >-
      --config=/etc/grafana/grafana.ini
    networks:
      - name: "{{ prometheus_grafana_network }}"
        ipv4_address: "{{ prometheus_grafana_ip }}"
    dns_servers:
      - "{{ ip_dns_0 }}"
      - "{{ ip_dns_1 }}"
    published_ports:
      - 3000/tcp
    recreate: >-
      {{ prometheus_grafana_configuration.changed or
         prometheus_grafana_dashboards.changed }}
    restart_policy: unless-stopped
    state: started
    volumes:
      - /etc/grafana:/etc/grafana:ro
      - grafana-data:/var/lib/grafana
  register: prometheus_grafana_container

# In certain situations if a manual change means prometheus in docker auto
# restarted but a host mounted file wasn't present it'll be auto created as a
# directory instead of a file
- name: Check docker host file mounts
  ansible.builtin.stat:
    path: "{{ item }}"
  with_items:
    - /etc/prometheus/alertmanager.yaml
    - /etc/prometheus/prometheus.yaml
  register: docker_file_mounts
- name: Assert docker host file mounts
  ansible.builtin.assert:
    that: "item.stat.isreg"
  with_items: "{{ docker_file_mounts.results }}"
  no_log: true

# Configure grafana
- name: Wait for grafana to start
  ansible.builtin.wait_for:
    host: "{{ prometheus_grafana_ip }}"
    port: 3000
- name: Rename grafana organization
  ansible.builtin.uri:
    url: "http://{{ prometheus_grafana_ip }}:3000/api/orgs/1"
    url_username: "{{ prometheus_grafana_user }}"
    url_password: "{{ prometheus_grafana_password }}"
    force_basic_auth: true
    method: PUT
    body_format: json
    body:
      name: "{{ prometheus_grafana_org }}"
